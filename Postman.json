{
	"info": {
		"_postman_id": "2fa3a843-dacf-4fac-a58b-515a297a8f20",
		"name": "API Unit Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Artist Tests",
			"description": "Folder containing GET requests to multiple Artist models. Tests in this folder check every resposne for all of the attributes that should be returned in an Artist model.",
			"item": [
				{
					"name": "Get First Artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91e0a825-7272-4aa7-b902-9f8dc57385b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/artist/1",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"artist",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Second Artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91e0a825-7272-4aa7-b902-9f8dc57385b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/artist/2",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"artist",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Third Artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91e0a825-7272-4aa7-b902-9f8dc57385b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/artist/3",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"artist",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Fourth Artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91e0a825-7272-4aa7-b902-9f8dc57385b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/artist/4",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"artist",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Fifth Artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91e0a825-7272-4aa7-b902-9f8dc57385b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/artist/5",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"artist",
								"5"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fdeb0fe9-984d-421c-87c4-0a2f62330296",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f6c46352-a338-429c-aebe-9306a7adc997",
						"type": "text/javascript",
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Has id\", function() {",
							"    pm.expect(jsonData).to.have.property('id')",
							"})",
							"",
							"pm.test(\"Has name\", function() {",
							"    pm.expect(jsonData).to.have.property('name')",
							"})",
							"",
							"pm.test(\"Has bio\", function() {",
							"    pm.expect(jsonData).to.have.property('bio')",
							"})",
							"",
							"pm.test(\"Has image\", function() {",
							"    pm.expect(jsonData).to.have.property('image')",
							"})",
							"",
							"pm.test(\"Has followers\", function() {",
							"    pm.expect(jsonData).to.have.property('followers')",
							"})",
							"",
							"pm.test(\"Has spotify_uri\", function() {",
							"    pm.expect(jsonData).to.have.property('spotify_uri')",
							"})",
							"",
							"pm.test(\"Has media\", function() {",
							"    pm.expect(jsonData).to.have.property('media')",
							"})",
							"",
							"pm.test(\"Has albums\", function() {",
							"    pm.expect(jsonData).to.have.property('albums')",
							"})"
						]
					}
				}
			]
		},
		{
			"name": "Album Tests",
			"description": "Folder containing GET requests to multiple Album models. Tests in this folder check every resposne for all of the attributes that should be returned in an Album model.",
			"item": [
				{
					"name": "Get First Album",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/album/1",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"album",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Second Album",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/album/2",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"album",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Third Album",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/album/3",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"album",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Fourth Album",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/album/4",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"album",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Fifth Album",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/album/5",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"album",
								"5"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9d1e3371-42c0-4eaf-b255-7f28a365cb98",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9aa48555-a911-404b-9a55-4fad85a60f51",
						"type": "text/javascript",
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Has id\", function() {",
							"    pm.expect(jsonData).to.have.property('id')",
							"})",
							"",
							"pm.test(\"Has name\", function() {",
							"    pm.expect(jsonData).to.have.property('name')",
							"})",
							"",
							"pm.test(\"Has release_date\", function() {",
							"    pm.expect(jsonData).to.have.property('release_date')",
							"})",
							"",
							"pm.test(\"Has image\", function() {",
							"    pm.expect(jsonData).to.have.property('image')",
							"})",
							"",
							"pm.test(\"Has label\", function() {",
							"    pm.expect(jsonData).to.have.property('label')",
							"})",
							"",
							"pm.test(\"Has tracks\", function() {",
							"    pm.expect(jsonData).to.have.property('tracks')",
							"})",
							"",
							"pm.test(\"Has spotify_uri\", function() {",
							"    pm.expect(jsonData).to.have.property('spotify_uri')",
							"})",
							"",
							"pm.test(\"Has media\", function() {",
							"    pm.expect(jsonData).to.have.property('media')",
							"})",
							"",
							"pm.test(\"Has artists\", function() {",
							"    pm.expect(jsonData).to.have.property('artists')",
							"})"
						]
					}
				}
			]
		},
		{
			"name": "Media Tests",
			"description": "Folder containing GET requests to multiple Media models. Tests in this folder check every resposne for all of the attributes that should be returned in an Media model.",
			"item": [
				{
					"name": "Get First Media",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/media/51",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"media",
								"51"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Second Media",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/media/52",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"media",
								"52"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Third Media",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/media/53",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"media",
								"53"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Fourth Media",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/media/54",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"media",
								"54"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Fifth Media",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/media/55",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"media",
								"55"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9d1e3371-42c0-4eaf-b255-7f28a365cb98",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9aa48555-a911-404b-9a55-4fad85a60f51",
						"type": "text/javascript",
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Has id\", function() {",
							"    pm.expect(jsonData).to.have.property('id')",
							"})",
							"",
							"pm.test(\"Has type\", function() {",
							"    pm.expect(jsonData).to.have.property('type')",
							"})",
							"",
							"pm.test(\"Has name\", function() {",
							"    pm.expect(jsonData).to.have.property('name')",
							"})",
							"",
							"pm.test(\"Has cast\", function() {",
							"    pm.expect(jsonData).to.have.property('cast')",
							"})",
							"",
							"pm.test(\"Has genres\", function() {",
							"    pm.expect(jsonData).to.have.property('genres')",
							"})",
							"",
							"pm.test(\"Has seasons\", function() {",
							"    pm.expect(jsonData).to.have.property('seasons')",
							"})",
							"",
							"pm.test(\"Has release_date\", function() {",
							"    pm.expect(jsonData).to.have.property('release_date')",
							"})",
							"",
							"pm.test(\"Has image\", function() {",
							"    pm.expect(jsonData).to.have.property('image')",
							"})",
							"",
							"pm.test(\"Has running\", function() {",
							"    pm.expect(jsonData).to.have.property('running')",
							"})",
							"",
							"pm.test(\"Has overview\", function() {",
							"    pm.expect(jsonData).to.have.property('overview')",
							"})",
							"",
							"pm.test(\"Has other_images\", function() {",
							"    pm.expect(jsonData).to.have.property('other_images')",
							"})",
							"",
							"pm.test(\"Has runtime\", function() {",
							"    pm.expect(jsonData).to.have.property('runtime')",
							"})",
							"",
							"pm.test(\"Has tagline\", function() {",
							"    pm.expect(jsonData).to.have.property('tagline')",
							"})",
							"",
							"pm.test(\"Has popularity\", function() {",
							"    pm.expect(jsonData).to.have.property('popularity')",
							"})",
							"",
							"pm.test(\"Has average_rating\", function() {",
							"    pm.expect(jsonData).to.have.property('average_rating')",
							"})",
							"",
							"pm.test(\"Has artists\", function() {",
							"    pm.expect(jsonData).to.have.property('artists')",
							"})",
							"",
							"pm.test(\"Has albums\", function() {",
							"    pm.expect(jsonData).to.have.property('albums')",
							"})"
						]
					}
				}
			]
		},
		{
			"name": "Multiple Tests",
			"description": null,
			"item": [
				{
					"name": "Get Multiple Media",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e9d8fa2-c5b4-402d-a1be-c203bdbcb464",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Multiple Media should not have a size of 0\", function() {",
									"    pm.expect(jsonData.count > 0)",
									"})",
									"",
									"pm.test(\"Check all Media models\", function() {",
									"    for(var index in jsonData.items) {",
									"        item = jsonData.items[index]",
									"        pm.expect(item).to.have.property('id')",
									"        pm.expect(item).to.have.property('type')",
									"        pm.expect(item).to.have.property('name')",
									"        pm.expect(item).to.have.property('genres')",
									"        pm.expect(item).to.have.property('seasons')",
									"        pm.expect(item).to.have.property('release_date')",
									"        pm.expect(item).to.have.property('image')",
									"        pm.expect(item).to.have.property('running')",
									"        pm.expect(item).to.have.property('overview')",
									"        pm.expect(item).to.have.property('runtime')",
									"        pm.expect(item).to.have.property('tagline')",
									"        pm.expect(item).to.have.property('popularity')",
									"        pm.expect(item).to.have.property('average_rating')",
									"    }",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/media",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Multiple Media Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e9d8fa2-c5b4-402d-a1be-c203bdbcb464",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Multiple Media should not have a size of 0\", function() {",
									"    pm.expect(jsonData.count > 0)",
									"})",
									"",
									"pm.test(\"Check all Media models\", function() {",
									"    for(var index in jsonData.items) {",
									"        item = jsonData.items[index]",
									"        pm.expect(item).to.have.property('id')",
									"        pm.expect(item).to.have.property('type')",
									"        pm.expect(item).to.have.property('name')",
									"        pm.expect(item).to.have.property('genres')",
									"        pm.expect(item).to.have.property('seasons')",
									"        pm.expect(item).to.have.property('release_date')",
									"        pm.expect(item).to.have.property('image')",
									"        pm.expect(item).to.have.property('running')",
									"        pm.expect(item).to.have.property('overview')",
									"        pm.expect(item).to.have.property('runtime')",
									"        pm.expect(item).to.have.property('tagline')",
									"        pm.expect(item).to.have.property('popularity')",
									"        pm.expect(item).to.have.property('average_rating')",
									"    }",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/media?search=new",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"media"
							],
							"query": [
								{
									"key": "search",
									"value": "new"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Multiple Media Filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e9d8fa2-c5b4-402d-a1be-c203bdbcb464",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Multiple Media should not have a size of 0\", function() {",
									"    pm.expect(jsonData.count > 0)",
									"})",
									"",
									"pm.test(\"Check all Media models\", function() {",
									"    for(var index in jsonData.items) {",
									"        item = jsonData.items[index]",
									"        pm.expect(item).to.have.property('id')",
									"        pm.expect(item).to.have.property('type')",
									"        pm.expect(item).to.have.property('name')",
									"        pm.expect(item).to.have.property('genres')",
									"        pm.expect(item).to.have.property('seasons')",
									"        pm.expect(item).to.have.property('release_date')",
									"        pm.expect(item).to.have.property('image')",
									"        pm.expect(item).to.have.property('running')",
									"        pm.expect(item).to.have.property('overview')",
									"        pm.expect(item).to.have.property('runtime')",
									"        pm.expect(item).to.have.property('tagline')",
									"        pm.expect(item).to.have.property('popularity')",
									"        pm.expect(item).to.have.property('average_rating')",
									"    }",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/media?end_year=2018&start_year=1980&order_by=release_date&asc",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"media"
							],
							"query": [
								{
									"key": "end_year",
									"value": "2018"
								},
								{
									"key": "start_year",
									"value": "1980"
								},
								{
									"key": "order_by",
									"value": "release_date"
								},
								{
									"key": "asc",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Multiple Artists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f9ff90b-813b-4c92-919a-ebad84a655ac",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Multiple Artists should not have a size of 0\", function() {",
									"    pm.expect(jsonData.count > 0)",
									"})",
									"",
									"pm.test(\"Check all Artist models\", function() {",
									"    for(var index in jsonData.items) {",
									"        item = jsonData.items[index]",
									"        pm.expect(item).to.have.property('id')",
									"        pm.expect(item).to.have.property('name')",
									"        pm.expect(item).to.have.property('image')",
									"        pm.expect(item).to.have.property('spotify_uri')",
									"    }",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/artist",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"artist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Multiple Artists Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f9ff90b-813b-4c92-919a-ebad84a655ac",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Multiple Artists should not have a size of 0\", function() {",
									"    pm.expect(jsonData.count > 0)",
									"})",
									"",
									"pm.test(\"Check all Artist models\", function() {",
									"    for(var index in jsonData.items) {",
									"        item = jsonData.items[index]",
									"        pm.expect(item).to.have.property('id')",
									"        pm.expect(item).to.have.property('name')",
									"        pm.expect(item).to.have.property('image')",
									"        pm.expect(item).to.have.property('spotify_uri')",
									"    }",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/artist?search=new",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"artist"
							],
							"query": [
								{
									"key": "search",
									"value": "new"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Multiple Artists Filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f9ff90b-813b-4c92-919a-ebad84a655ac",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Multiple Artists should not have a size of 0\", function() {",
									"    pm.expect(jsonData.count > 0)",
									"})",
									"",
									"pm.test(\"Check all Artist models\", function() {",
									"    for(var index in jsonData.items) {",
									"        item = jsonData.items[index]",
									"        pm.expect(item).to.have.property('id')",
									"        pm.expect(item).to.have.property('name')",
									"        pm.expect(item).to.have.property('image')",
									"        pm.expect(item).to.have.property('spotify_uri')",
									"    }",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/artist?min_followers=8000&max_followers=10000&order_by=followers&asc",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"artist"
							],
							"query": [
								{
									"key": "min_followers",
									"value": "8000"
								},
								{
									"key": "max_followers",
									"value": "10000"
								},
								{
									"key": "order_by",
									"value": "followers"
								},
								{
									"key": "asc",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Multiple Albums",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab66a531-43cf-4724-ae5d-5ed51a125380",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Multiple Albums should not have a size of 0\", function() {",
									"    pm.expect(jsonData.count > 0)",
									"})",
									"",
									"pm.test(\"Check all Album models\", function() {",
									"    for( var index in jsonData.items) {",
									"        item = jsonData.items[index]",
									"        pm.expect(item).to.have.property('id')",
									"        pm.expect(item).to.have.property('name')",
									"        pm.expect(item).to.have.property('release_date')",
									"        pm.expect(item).to.have.property('image')",
									"        pm.expect(item).to.have.property('label')",
									"        pm.expect(item).to.have.property('spotify_uri')",
									"    }",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/album",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"album"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Multiple Albums Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab66a531-43cf-4724-ae5d-5ed51a125380",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Multiple Albums should not have a size of 0\", function() {",
									"    pm.expect(jsonData.count > 0)",
									"})",
									"",
									"pm.test(\"Check all Album models\", function() {",
									"    for( var index in jsonData.items) {",
									"        item = jsonData.items[index]",
									"        pm.expect(item).to.have.property('id')",
									"        pm.expect(item).to.have.property('name')",
									"        pm.expect(item).to.have.property('release_date')",
									"        pm.expect(item).to.have.property('image')",
									"        pm.expect(item).to.have.property('label')",
									"        pm.expect(item).to.have.property('spotify_uri')",
									"    }",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/album?search=new",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"album"
							],
							"query": [
								{
									"key": "search",
									"value": "new"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Multiple Albums Filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35d6c632-4476-42f9-ac24-7bb7052842d7",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Multiple Albums should not have a size of 0\", function() {",
									"    pm.expect(jsonData.count > 0)",
									"})",
									"",
									"pm.test(\"Check all Album models\", function() {",
									"    for( var index in jsonData.items) {",
									"        item = jsonData.items[index]",
									"        pm.expect(item).to.have.property('id')",
									"        pm.expect(item).to.have.property('name')",
									"        pm.expect(item).to.have.property('release_date')",
									"        pm.expect(item).to.have.property('image')",
									"        pm.expect(item).to.have.property('label')",
									"        pm.expect(item).to.have.property('spotify_uri')",
									"    }",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server_url}}/album?end_year=1960&asc&order_by=release_date",
							"protocol": "http",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"album"
							],
							"query": [
								{
									"key": "end_year",
									"value": "1960"
								},
								{
									"key": "asc",
									"value": null
								},
								{
									"key": "order_by",
									"value": "release_date"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get About",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8807174e-6b84-46d7-932f-f58e24362bf4",
						"type": "text/javascript",
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Has commits\", function() {",
							"    pm.expect(jsonData).to.have.property('commits')",
							"})",
							"",
							"pm.test(\"Has total_commits\", function() {",
							"    pm.expect(jsonData).to.have.property('total_commits')",
							"})",
							"",
							"pm.test(\"Has issues\", function() {",
							"    pm.expect(jsonData).to.have.property('issues')",
							"})",
							"",
							"pm.test(\"Has total_issues\", function() {",
							"    pm.expect(jsonData).to.have.property('total_issues')",
							"})"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{server_url}}/about",
					"protocol": "http",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"about"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Search",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3a82c94a-6bb0-4bd4-a238-87de500f2fde",
						"type": "text/javascript",
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Search should not have a size of 0\", function() {",
							"    pm.expect(jsonData.count > 0)",
							"})",
							"",
							"pm.test(\"Check all Artist models\", function() {",
							"    for(var index in jsonData.items) {",
							"        item = jsonData.items[index]",
							"        pm.expect(item).to.have.property('about')",
							"        pm.expect(item).to.have.property('id')",
							"        pm.expect(item).to.have.property('image')",
							"        pm.expect(item).to.have.property('kind')",
							"        pm.expect(item).to.have.property('name')",
							"        pm.expect(item).to.have.property('release_date')",
							"    }",
							"})"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{server_url}}/search/new",
					"protocol": "http",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"search",
						"new"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8ff5acd7-e423-423d-bc0b-fca5fdd72971",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4a51c9ef-9cab-4c90-b176-602ca2f31179",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response OK\", function() {",
					"    pm.response.to.have.status(200);",
					"});",
					"",
					"pm.test(\"Application/JSON Header Check\", function() {",
					"    var cont_type = pm.response.headers.get('Content-Type')",
					"    pm.expect(cont_type).to.equal('application/json')",
					"})"
				]
			}
		}
	]
}