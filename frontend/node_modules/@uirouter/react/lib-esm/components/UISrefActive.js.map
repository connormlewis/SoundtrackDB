{
  "version": 3,
  "file": "UISrefActive.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/react/components/UISrefActive.tsx"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "/**\n * @reactapi\n * @module components\n */ /** */\nimport * as React from 'react';\nimport { Component, cloneElement, ValidationMap } from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _classNames from 'classnames';\n\nimport { UIRouterReact, UISref } from '../index';\nimport { UIViewAddress } from './UIView';\nimport { UIRouterInstanceUndefinedError } from './UIRouter';\n\nlet classNames = _classNames;\n\nexport interface UISrefActiveProps {\n  class?: string;\n  exact?: Boolean;\n  children?: any;\n}\n\nexport interface UISrefActiveState {\n  state: { name: string; [key: string]: any };\n  params: Object;\n  hash: string;\n}\n\nexport const StateNameMustBeAStringError = new Error(\n  'State name provided to <UISref {to}> must be a string.',\n);\n\nexport class UISrefActive extends Component<UISrefActiveProps, any> {\n  // keep track of states to watch and their activeClasses\n  states: Array<UISrefActiveState> = [];\n  activeClasses: { [key: string]: string } = {};\n\n  // deregister the callback for state changed when unmounted\n  deregister: Function;\n\n  static propTypes = {\n    class: PropTypes.string.isRequired,\n    children: PropTypes.element.isRequired,\n  };\n\n  static contextTypes: ValidationMap<any> = {\n    router: PropTypes.object,\n    parentUIViewAddress: PropTypes.object,\n  };\n\n  static childContextTypes: ValidationMap<any> = {\n    parentUiSrefActiveAddStateInfo: PropTypes.func,\n  };\n\n  state = {\n    activeClasses: '',\n  };\n\n  getChildContext() {\n    return {\n      parentUiSrefActiveAddStateInfo: this.addStateInfo,\n    };\n  }\n\n  componentWillMount() {\n    let router = this.context['router'];\n    if (typeof router === 'undefined') {\n      throw UIRouterInstanceUndefinedError;\n    }\n    // register callback for state change\n    this.deregister = this.context['router'].transitionService.onSuccess(\n      {},\n      () => this.updateActiveClasses(),\n    );\n  }\n\n  componentWillUnmount() {\n    this.deregister();\n  }\n\n  addStateInfo = (stateName, stateParams) => {\n    const activeClass = this.props.class;\n    let deregister = this.addState(stateName, stateParams, activeClass);\n    this.updateActiveClasses();\n    return deregister;\n  };\n\n  addState = (stateName, stateParams, activeClass) => {\n    const { stateService } = this.context['router'];\n    let parent = this.context['parentUIViewAddress'];\n    let stateContext =\n      (parent && parent.context) || this.context['router'].stateRegistry.root();\n    let state = stateService.get(stateName, stateContext);\n    let stateHash = this.createStateHash(stateName, stateParams);\n    let stateInfo = {\n      state: state || { name: stateName },\n      params: stateParams,\n      hash: stateHash,\n    };\n    this.states.push(stateInfo);\n    this.activeClasses[stateHash] = activeClass;\n    return () => {\n      let idx = this.states.indexOf(stateInfo);\n      if (idx !== -1) this.states.splice(idx, 1);\n    };\n  };\n\n  createStateHash = (state: string, params: Object) => {\n    if (typeof state !== 'string') {\n      throw StateNameMustBeAStringError;\n    }\n    return params && typeof params === 'object'\n      ? state + JSON.stringify(params)\n      : state;\n  };\n\n  getActiveClasses = (): string => {\n    let activeClasses = [];\n    let { stateService } = this.context['router'];\n    let { exact } = this.props;\n    this.states.forEach(s => {\n      let { state, params, hash } = s;\n      if (!exact && stateService.includes(state.name, params))\n        activeClasses.push(this.activeClasses[hash]);\n      if (exact && stateService.is(state.name, params))\n        activeClasses.push(this.activeClasses[hash]);\n    });\n    return classNames(activeClasses);\n  };\n\n  updateActiveClasses = (): void => {\n    const { activeClasses } = this.state;\n    const newActiveClasses = this.getActiveClasses();\n    if (activeClasses !== newActiveClasses) {\n      this.setState({\n        activeClasses: this.getActiveClasses(),\n      });\n    }\n  };\n\n  render() {\n    const { activeClasses } = this.state;\n    return activeClasses.length > 0\n      ? cloneElement(\n          this.props.children,\n          Object.assign({}, this.props.children.props, {\n            className: classNames(\n              this.props.children.props.className,\n              activeClasses,\n            ),\n          }),\n        )\n      : this.props.children;\n  }\n}\n"
  ]
}