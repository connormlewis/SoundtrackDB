{
  "version": 3,
  "file": "reactViews.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/react/reactViews.tsx"
  ],
  "names": [],
  "mappings": ";;AAAA;;;GAGG,CAAC,MAAM;AACV,uCASwB;AAIxB;;;;;;;;;;GAUG;AACH,2BAAkC,KAAkB;IAClD,IAAI,KAAK,GAAG,EAAE,EACZ,qBAAqB,CAAC;IACxB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QACjB,qBAAqB,GAAG,EAAE,QAAQ,EAAE,WAAI,CAAC,KAAK,EAAE,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC;IACnE,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,qBAAqB,GAAG,UAAG,CAAC,KAAK,CAAC,KAAK,EAAE,UAAC,GAAQ,EAAE,GAAG;YACrD,EAAE,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC;gBAAC,MAAM,CAAC,GAAG,CAAC;YAC9B,MAAM,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,cAAO,CAAC,qBAAqB,EAAE,UAAS,MAAM,EAAE,IAAI;QAClD,IAAI,GAAG,IAAI,IAAI,UAAU,CAAC,CAAC,6CAA6C;QACxE,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC;YAAC,MAAM,CAAC;QAE5C,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC;QACvB,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;QACxB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG,kBAAW,CAAC,qBAAqB,CAChD,MAAM,CAAC,QAAQ,EACf,MAAM,CAAC,KAAK,CACb,CAAC;QACF,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC,UAAU,CAAC;QAC3C,MAAM,CAAC,oBAAoB,GAAG,UAAU,CAAC,mBAAmB,CAAC;QAE7D,KAAK,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;IACvB,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,KAAK,CAAC;AACf,CAAC;AA9BD,8CA8BC;AAED,mBAAmB;AACnB,IAAI,EAAE,GAAG,CAAC,CAAC;AAEX,mBAAmB;AACnB;IAIE,yBAAmB,IAAgB,EAAS,QAA8B;QAAvD,SAAI,GAAJ,IAAI,CAAY;QAAS,aAAQ,GAAR,QAAQ,CAAsB;QAH1E,WAAM,GAAY,IAAI,CAAC;QACvB,QAAG,GAAW,EAAE,EAAE,CAAC;IAE0D,CAAC;IAE9E,8BAAI,GAAJ;QACE,MAAM,CAAC,eAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IACH,sBAAC;AAAD,CAAC,AATD,IASC;AATY,0CAAe",
  "sourcesContent": [
    "/**\n * @reactapi\n * @module react\n */ /** */\nimport {\n  services,\n  forEach,\n  map,\n  pick,\n  PathNode,\n  ViewConfig,\n  ViewService,\n  StateObject,\n} from '@uirouter/core';\n\nimport { ReactViewDeclaration } from './interface';\n\n/**\n * This is a [[StateBuilder.builder]] function for react `views`.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to ui-router-react.\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and\n * applies the state-level configuration to a view named `$default`.\n *\n * @internalapi\n */\nexport function reactViewsBuilder(state: StateObject) {\n  let views = {},\n    viewsDefinitionObject;\n  if (!state.views) {\n    viewsDefinitionObject = { $default: pick(state, ['component']) };\n  } else {\n    viewsDefinitionObject = map(state.views, (val: any, key) => {\n      if (val.component) return val;\n      return { component: val };\n    });\n  }\n\n  forEach(viewsDefinitionObject, function(config, name) {\n    name = name || '$default'; // Account for views: { \"\": { template... } }\n    if (Object.keys(config).length == 0) return;\n\n    config.$type = 'react';\n    config.$context = state;\n    config.$name = name;\n\n    let normalized = ViewService.normalizeUIViewTarget(\n      config.$context,\n      config.$name,\n    );\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\n    views[name] = config;\n  });\n  return views;\n}\n\n/** @internalapi */\nlet id = 0;\n\n/** @internalapi */\nexport class ReactViewConfig implements ViewConfig {\n  loaded: boolean = true;\n  $id: number = id++;\n\n  constructor(public path: [PathNode], public viewDecl: ReactViewDeclaration) {}\n\n  load() {\n    return services.$q.when(this);\n  }\n}\n"
  ]
}